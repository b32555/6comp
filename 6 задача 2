#include <iostream>
#include <cmath>
#include <vector>

using namespace std;

double f(const vector<double>& x) {
    return pow(x[0], 2) + exp(pow(x[0], 2) + pow(x[1], 2)) + 4*x[0] + 3*x[1];
}

vector<double> gradient(const vector<double>& x) {
    vector<double> grad(2);
    grad[0] = 2*x[0] + 2*x[0]*exp(pow(x[0], 2) + pow(x[1], 2)) + 4;
    grad[1] = 2*x[1]*exp(pow(x[0], 2) + pow(x[1], 2)) + 3;
    return grad;
}

void gradient_descent(vector<double>& x, double learning_rate, int num_iterations) {
    for (int i = 0; i < num_iterations; ++i) {
        vector<double> grad = gradient(x);
        for (int j = 0; j < x.size(); ++j) {
            x[j] -= learning_rate * grad[j];
        }
        if (sqrt(pow(grad[0], 2) + pow(grad[1], 2)) < 1e-6) break;
    }
}

int main() {
    vector<double> x = {0.0, 0.0}; // Initial guess
    double learning_rate = 0.01;
    int num_iterations = 1000;

    gradient_descent(x, learning_rate, num_iterations);

    cout << "Optimal x: [" << x[0] << ", " << x[1] << "]" << endl;
    cout << "Optimal f(x): " << f(x) << endl;

    return 0;
}
